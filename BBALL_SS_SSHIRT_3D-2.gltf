<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Babylon.js 3D Viewer</title>
    <style>
        html, body {
            overflow: hidden;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }
    </style>
</head>
<body>
    <canvas id="renderCanvas"></canvas>

    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>

    <script>
        const canvas = document.getElementById("renderCanvas");
        const engine = new BABYLON.Engine(canvas, true);

        const createScene = async function () {
            const scene = new BABYLON.Scene(engine);
            scene.clearColor = new BABYLON.Color4(0.1, 0.1, 0.15, 1); // Dark grey background

            const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 3, BABYLON.Vector3.Zero(), scene);
            camera.attachControl(canvas, true);
            camera.lowerRadiusLimit = 1.5;
            camera.upperRadiusLimit = 10;
            camera.wheelPrecision = 50;

            const envTexture = BABYLON.CubeTexture.CreateFromPrefilteredData("https://assets.babylonjs.com/environments/studio.env", scene);
            scene.environmentTexture = envTexture;

            // Load the model. The loader will now automatically find and apply the textures
            // that are listed inside the .gltf file itself.
            // NOTE: Make sure you have renamed the file to remove the space.
            const result = await BABYLON.SceneLoader.ImportMeshAsync(
                "", 
                "./", 
                "BBALL_SS_SSHIRT_3D-2.gltf", 
                scene
            );

            const rootMesh = result.meshes[0];
            rootMesh.position = new BABYLON.Vector3(0, -0.9, 0); // Center the model

            // Find the actual mesh and its material after loading
            const childMesh = rootMesh.getChildMeshes(true)[0];
            const material = childMesh.material;

            if (material instanceof BABYLON.PBRMaterial) {
                // The loader already applied the normal and occlusion maps from the gltf.
                // Now, we will override the main color texture to use your template.
                material.albedoTexture = new BABYLON.Texture("advanced_template.png", scene);

                // This is the fabric overlay texture
                material.detailMap.texture = new BABYLON.Texture("texture.jpg", scene);
                material.detailMap.isEnabled = true;
                material.detailMap.uScale = 12; // Increased tiling for a finer fabric look
                material.detailMap.vScale = 12;
                material.detailMap.level = 0.1; // Make it very subtle

                // Adjust material properties for a fabric look
                material.metallic = 0.0;
                material.roughness = 0.9;
            }

            // Add the spinning animation
            scene.onBeforeRenderObservable.add(() => {
                const deltaTime = engine.getDeltaTime() / 1000; 
                rootMesh.rotation.y += 0.25 * deltaTime;
            });

            return scene;
        };

        createScene().then(sceneToRender => {
            engine.runRenderLoop(() => sceneToRender.render());
        });

        window.addEventListener("resize", () => engine.resize());
    </script>
</body>
</html>
